---
- name: get secrets from 1password
  hosts: localhost
  become: false
  gather_facts: false
  tasks:
    - name: sign in to a 1password account
      ansible.builtin.shell: |
        echo {{ vault_1password_master_password }} | op account add \
          --address {{ vault_1password_subdomain }}.1password.com \
          --email {{ vault_1password_email_address }} \
          --secret-key {{ vault_1password_secret_key }} \
          --signin --raw
      environment:
        OP_DEVICE: "{{ vault_1password_device_id }}"
      register: op_session_token
      changed_when: false
      no_log: true

    - name: get secrets from 1password (1/2)
      ansible.builtin.command: |
        op item get 'Secrets (manually)' \
          --vault 'Local server' \
          --fields label={{ item }} \
          --session {{ op_session_token.stdout }}
      loop:
        - "Domains.'internal domain name'"
        - "'Technical accounts'.'nixos technical account name'"
        - "'Technical accounts'.'prometheus auth user'"
        - "'Technical accounts'.'grafana auth user'"
      register: secrets
      changed_when: false
      no_log: true

    - name: get secrets from 1password (2/2)
      ansible.builtin.set_fact:
        internal_domain_name: "{{ secrets.results[0].stdout }}"
        nixos_technical_account_name: "{{ secrets.results[1].stdout }}"
        prometheus_auth_user: "{{ secrets.results[2].stdout }}"
        grafana_auth_user: "{{ secrets.results[3].stdout }}"

- name: configure server
  hosts: server
  become: true
  gather_facts: false
  tasks:
    - name: create directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - /mnt/hdd/src
        - /mnt/ssd/databases
        - /mnt/ssd/monitoring

    - name: create a directory for promtail
      ansible.builtin.file:
        path: /mnt/ssd/monitoring/promtail
        state: directory
        mode: 0777

    # ------------------- self-signed certificate ------------------- #

    - name: check if ca certificate exists on local machine
      ansible.builtin.stat:
        path: ca.crt
      register: ca_crt
      delegate_to: localhost
      become: false

    - name: issue a self-signed certificate
      block:
        - name: find the latest version of easy-rsa
          ansible.builtin.shell: git -c 'versionsort.suffix=-' ls-remote --tags --sort='-version:refname' --exit-code https://github.com/OpenVPN/easy-rsa.git '*[0-9].[0-9].[0-9]' | head -n 1 | sed -E 's|.*refs/tags/(.+)|\1|'
          register: easy_rsa_latest_version
          delegate_to: localhost
          changed_when: false
          become: false

        - name: download and extract easy-rsa archive
          ansible.builtin.unarchive:
            src: https://github.com/OpenVPN/easy-rsa/releases/download/{{ easy_rsa_latest_version.stdout }}/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}.tgz
            dest: /mnt/hdd/src
            remote_src: true
            owner: root
            group: root
            creates: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}

        - name: create easy-rsa vars
          ansible.builtin.copy:
            src: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}/vars.example
            dest: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}/vars
            remote_src: true
            force: false

        - name: set easy-rsa parameters
          ansible.builtin.replace:
            path: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}/vars
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: '#(set_var\sEASYRSA_DN\s+"cn_only")',    replace: '\1' }
            - { regexp: '#(set_var\sEASYRSA_KEY_SIZE\s+2048)',   replace: '\1' }
            - { regexp: '#(set_var\sEASYRSA_ALGO\s+rsa)',        replace: '\1' }
            - { regexp: '#(set_var\sEASYRSA_CA_EXPIRE\s+3650)',  replace: '\1' }
            - { regexp: '#set_var\sEASYRSA_CERT_EXPIRE\s+825',   replace: 'set_var EASYRSA_CERT_EXPIRE     3650' }
            - { regexp: '#(set_var\sEASYRSA_CRL_DAYS\s+180)',    replace: '\1' }
            - { regexp: '#(set_var\sEASYRSA_DIGEST\s+"sha256")', replace: '\1' }

        - name: init pki
          ansible.builtin.command: ./easyrsa init-pki
          args:
            chdir: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}
            creates: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}/pki

        - name: create a certificate authority
          ansible.builtin.shell: |
            spawn ./easyrsa build-ca nopass
            expect -exact "Common Name (eg: your user, host, or server name) \[Easy-RSA CA\]:"
            send -- "{{ hostvars['localhost']['internal_domain_name'] | replace('.',' ') | title }} Root CA\r"
            expect eof
          args:
            chdir: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}
            executable: /etc/profiles/per-user/{{ hostvars['localhost']['nixos_technical_account_name'] }}/bin/expect
            creates: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}/pki/ca.crt

        - name: issue an ssl certificate
          ansible.builtin.command: ./easyrsa --batch build-server-full {{ hostvars['localhost']['internal_domain_name'] }} nopass
          args:
            chdir: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}
            creates: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}/pki/issued/{{ hostvars['localhost']['internal_domain_name'] }}.crt

        - name: copy an ssl certificate to /var folder
          ansible.builtin.copy:
            src: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}/pki/issued/{{ hostvars['localhost']['internal_domain_name'] }}.crt
            dest: /var/{{ hostvars['localhost']['internal_domain_name'] }}.crt
            remote_src: true
          register: certificate

        - name: copy a private key to /var folder
          ansible.builtin.copy:
            src: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}/pki/private/{{ hostvars['localhost']['internal_domain_name'] }}.key
            dest: /var/{{ hostvars['localhost']['internal_domain_name'] }}.key
            remote_src: true
          register: key

        - name: populate service facts
          ansible.builtin.service_facts:

        - name: reload service nginx
          ansible.builtin.systemd:
            name: nginx.service
            state: reloaded
          when:
            - certificate.changed or key.changed
            - "'nginx.service' in ansible_facts.services"

        - name: copy ca certificate from server to local machine
          ansible.posix.synchronize:
            mode: pull
            src: /mnt/hdd/src/EasyRSA-{{ easy_rsa_latest_version.stdout[1:] }}/pki/ca.crt
            dest: ./
      when: ca_crt.stat.exists == false

    # ------------------- databases ------------------- #

    - name: set seed variables
      ansible.builtin.set_fact:
        minio_access_key_seed: minio_access_key_random
        minio_secret_key_seed: minio_secret_key_random

    - name: create random but idempotent passwords
      ansible.builtin.set_fact:
        minio_access_key: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits length=20', seed=minio_access_key_seed) }}"
        minio_secret_key: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits length=40', seed=minio_secret_key_seed) }}"

    # ------------------- monitoring ------------------- #

    - name: set seed variables
      ansible.builtin.set_fact:
        prometheus_auth_seed: prometheus_auth
        grafana_auth_seed: grafana_auth
        prometheus_datasource_seed: prometheus_datasource
        loki_datasource_seed: loki_datasource

    - name: create random but idempotent passwords and uid
      ansible.builtin.set_fact:
        prometheus_auth_password: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits,punctuation length=24', seed=prometheus_auth_seed) }}"
        grafana_auth_password: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits,punctuation length=24', seed=grafana_auth_seed) }}"
        prometheus_datasource_uid: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits,- length=9', seed=prometheus_datasource_seed) }}"
        loki_datasource_uid: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits,- length=9', seed=loki_datasource_seed) }}"

    - name: create a basic auth password file to access prometheus
      community.general.htpasswd:
        path: /root/.prometheusBasicAuthPasswordFile
        name: "{{ hostvars['localhost']['prometheus_auth_user'] }}"
        password: "{{ prometheus_auth_password }}"
        mode: 0600

    - name: create a password file to login to grafana
      ansible.builtin.copy:
        content: "{{ grafana_auth_password }}"
        dest: /var/.grafanaAdminPassword

    - name: check if a grafana dashboard has been downloaded to the local machine
      ansible.builtin.command: "grep '\"uid\": \"\",' '{{ item }}'"
      with_fileglob: dashboards/*
      register: dashboard_uid
      delegate_to: localhost
      failed_when: false
      changed_when: false
      become: false

    - name: templatization of grafana dashboards
      block:
        # find and escape double curly braces which looks like:
        # "legendFormat": "{{quantile}} ({{interval}})",
        - name: escape double curly braces (1/3)
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '{% raw %}("){{(.*)}}(.*){{(.*)}}(.*",){% endraw %}'
            replace: '\1{{ "{% raw %}{{" }}\2{{ "}}{% endraw %}" }}\3{{ "{% raw %}{{" }}\4{{ "}}{% endraw %}" }}\5'
          with_fileglob: dashboards/*

        # find and escape double curly braces which looks like:
        # "legendFormat": "Used Capacity [{{server}}:{{disk}}]",
        - name: escape double curly braces (2/3)
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '{% raw %}(":((?!{% raw %}).)*){{(.*)}}(:){{(.*)}}(.*",){% endraw %}'
            replace: '\1{{ "{% raw %}{{" }}\3{{ "}}{% endraw %}" }}\4{{ "{% raw %}{{" }}\5{{ "}}{% endraw %}" }}\6'
          with_fileglob: dashboards/*

        # find and escape double curly braces which looks like:
        # "legendFormat": "{{job}}",
        # "legendFormat": "duration-{{p99}}",
        # "legendFormat": "{{slice}}_p99",
        # "legendFormat": "Data Received [{{server}}]",
        - name: escape double curly braces (3/3)
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '{% raw %}(":((?!{% raw %}).)*){{(.*)}}(.*",){% endraw %}'
            replace: '\1{{ "{% raw %}{{" }}\3{{ "}}{% endraw %}" }}\4'
          with_fileglob: dashboards/*

        - name: change datasource uid to variable
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '{{ prometheus_datasource_uid }}'
            replace: '{% raw %}{{ prometheus_datasource_uid }}{% endraw %}'
          with_fileglob: dashboards/*

        - name: delete dashboard uid
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '("uid":\s").*(",)'
            replace: '\1\2'
          with_fileglob: dashboards/*

        - name: set dashboard version
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '"version":\s.*,'
            replace: '"version": 0,'
          with_fileglob: dashboards/*
      delegate_to: localhost
      become: false
      when: dashboard_uid.results | json_query('[*].rc') | reject('match', '0')

    - name: upload grafana dashboards
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/var/lib/grafana/dashboards/"
      with_fileglob: dashboards/*

    # ------------------- nixos configuration ------------------- #

    - name: upload nixos configuration files
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/etc/nixos/"
      with_fileglob: templates/*
      register: config
      notify: apply config

    - name: check that everything compiles cleanly
      ansible.builtin.command: nixos-rebuild build
      when: config.changed

  handlers:
    - name: apply config
      ansible.builtin.command: nixos-rebuild switch

  post_tasks:
    - name: check if item in 1password has been created
      ansible.builtin.command: |
        op item get 'Databases (generated)' \
          --vault 'Local server' \
          --session {{ hostvars['localhost']['op_session_token']['stdout'] }}
      register: item_created
      delegate_to: localhost
      failed_when: false
      changed_when: false
      become: false
      no_log: true

    - name: create an item in 1password with credentials for databases
      ansible.builtin.shell: |
        op item template get Login --session {{ hostvars['localhost']['op_session_token']['stdout'] }} | op item create --vault 'Local server' - \
          --title 'Databases (generated)' \
          Minio.website[url]=http://{{ hostvars['localhost']['internal_domain_name'] }}/minio \
          Minio.'Username (Access Key)'[text]='{{ minio_access_key }}' \
          Minio.'Password (Secret Key)'[password]='{{ minio_secret_key }}' \
          --session {{ hostvars['localhost']['op_session_token']['stdout'] }}
      delegate_to: localhost
      become: false
      no_log: true
      when: item_created.rc != 0

    - name: check if item in 1password has been created
      ansible.builtin.command: |
        op item get 'Monitoring (generated)' \
          --vault 'Local server' \
          --session {{ hostvars['localhost']['op_session_token']['stdout'] }}
      register: item_created
      delegate_to: localhost
      failed_when: false
      changed_when: false
      become: false
      no_log: true

    - name: create an item in 1password with credentials for monitoring
      ansible.builtin.shell: |
        op item template get Login --session {{ hostvars['localhost']['op_session_token']['stdout'] }} | op item create --vault 'Local server' - \
          --title 'Monitoring (generated)' \
          Prometheus.website[url]=http://{{ hostvars['localhost']['internal_domain_name'] }}/prometheus \
          Prometheus.username[text]={{ hostvars['localhost']['prometheus_auth_user'] }} \
          Prometheus.password[password]='{{ prometheus_auth_password }}' \
          Grafana.website[url]=http://{{ hostvars['localhost']['internal_domain_name'] }}/grafana \
          Grafana.username[text]={{ hostvars['localhost']['grafana_auth_user'] }} \
          Grafana.password[password]='{{ grafana_auth_password }}' \
          --session {{ hostvars['localhost']['op_session_token']['stdout'] }}
      delegate_to: localhost
      become: false
      no_log: true
      when: item_created.rc != 0
