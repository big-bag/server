---
- name: upload dashboards
  hosts: server
  become: true
  gather_facts: false
  tasks:
    - name: check if a grafana dashboard has been downloaded to the local machine
      ansible.builtin.command: "grep '\"uid\": \"\",' '{{ item }}'"
      with_fileglob:
        - ../dashboards/*
        - ../dashboards/Mimir/*
        - ../dashboards/Prometheus/*
        - ../dashboards/Redis/*
        - ../dashboards/GitLab/*
      register: dashboard_uid
      delegate_to: localhost
      failed_when: false
      changed_when: false
      become: false

    - name: templatization of grafana dashboards
      block:
        # find and escape double curly braces which look like:
        # "legendFormat": "{{quantile}} ({{interval}})",
        - name: escape double curly braces (1/3)
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '{% raw %}("){{(.*)}}(.*){{(.*)}}(.*",){% endraw %}'
            replace: '\1{{ "{% raw %}{{" }}\2{{ "}}{% endraw %}" }}\3{{ "{% raw %}{{" }}\4{{ "}}{% endraw %}" }}\5'
          with_fileglob:
            - ../dashboards/*
            - ../dashboards/Mimir/*
            - ../dashboards/Prometheus/*
            - ../dashboards/Redis/*
            - ../dashboards/GitLab/*

        # find and escape double curly braces which look like:
        # "legendFormat": "Used Capacity [{{server}}:{{disk}}]",
        - name: escape double curly braces (2/3)
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '{% raw %}(":((?!{% raw %}).)*){{(.*)}}(:){{(.*)}}(.*",){% endraw %}'
            replace: '\1{{ "{% raw %}{{" }}\3{{ "}}{% endraw %}" }}\4{{ "{% raw %}{{" }}\5{{ "}}{% endraw %}" }}\6'
          with_fileglob:
            - ../dashboards/*
            - ../dashboards/Mimir/*
            - ../dashboards/Prometheus/*
            - ../dashboards/Redis/*
            - ../dashboards/GitLab/*

        # find and escape double curly braces which look like:
        # "legendFormat": "{{job}}",
        # "legendFormat": "duration-{{p99}}",
        # "legendFormat": "{{slice}}_p99",
        # "legendFormat": "Data Received [{{server}}]",
        - name: escape double curly braces (3/3)
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '{% raw %}(":((?!{% raw %}).)*){{(.*)}}(.*",){% endraw %}'
            replace: '\1{{ "{% raw %}{{" }}\3{{ "}}{% endraw %}" }}\4'
          with_fileglob:
            - ../dashboards/*
            - ../dashboards/Mimir/*
            - ../dashboards/Prometheus/*
            - ../dashboards/Redis/*
            - ../dashboards/GitLab/*

        - name: reset variable values (1/2)
          ansible.builtin.replace:
            path: "{{ item }}"
            after: '"templating":\s{'
            before: '"time":\s{'
            regexp: '("text":\s").*(",)'
            replace: '\1\2'
          with_fileglob:
            - ../dashboards/*
            - ../dashboards/Mimir/*
            - ../dashboards/Prometheus/*
            - ../dashboards/Redis/*
            - ../dashboards/GitLab/*

        - name: reset variable values (2/2)
          ansible.builtin.replace:
            path: "{{ item }}"
            after: '"templating":\s{'
            before: '"time":\s{'
            regexp: '("value":\s").*(")'
            replace: '\1\2'
          with_fileglob:
            - ../dashboards/*
            - ../dashboards/Mimir/*
            - ../dashboards/Prometheus/*
            - ../dashboards/Redis/*
            - ../dashboards/GitLab/*

        - name: set variable values in github dashboard (1/2)
          ansible.builtin.replace:
            path: ../dashboards/GitHub Default.json
            after: '"name":\s"datasource",'
            before: '"name":\s"organization",'
            regexp: "{{ item }}"
            replace: '\1big-bag\2'
          loop:
            - '("text":\s").*(",)'
            - '("value":\s").*(")'

        - name: set variable values in github dashboard (2/2)
          ansible.builtin.replace:
            path: ../dashboards/GitHub Default.json
            after: '"type":\s"textbox"'
            before: '"name":\s"repository",'
            regexp: "{{ item }}"
            replace: '\1server\2'
          loop:
            - '("text":\s").*(",)'
            - '("value":\s").*(")'

        - name: set variable values in mimir dashboard (1/5)
          ansible.builtin.replace:
            path: ../dashboards/Mimir/Mimir - Overrides.json
            after: '"name":\s"namespace",'
            before: '"type":\s"textbox"'
            regexp: "{{ item }}"
            replace: '\1.*\2'
          loop:
            - '("text":\s").*(",)'
            - '("value":\s").*(")'

        - name: set variable values in mimir dashboard (2/5)
          ansible.builtin.replace:
            path: ../dashboards/Mimir/Mimir - Tenants.json
            after: '"name":\s"user",'
            before: '"name":\s"limit",'
            regexp: '("text":\s").*(",)'
            replace: '"text": "10",'

        - name: set variable values in mimir dashboard (3/5)
          ansible.builtin.replace:
            path: ../dashboards/Mimir/Mimir - Tenants.json
            after: '"name":\s"user",'
            before: '"name":\s"limit",'
            regexp: '("value":\s").*(")'
            replace: '"value": "10"'

        - name: set variable values in mimir dashboard (4/5)
          ansible.builtin.replace:
            path: ../dashboards/Mimir/Mimir - Top tenants.json
            after: '"name":\s"namespace",'
            before: '"name":\s"limit",'
            regexp: '("text":\s").*(",)'
            replace: '"text": "10",'

        - name: set variable values in mimir dashboard (5/5)
          ansible.builtin.replace:
            path: ../dashboards/Mimir/Mimir - Top tenants.json
            after: '"name":\s"namespace",'
            before: '"name":\s"limit",'
            regexp: '("value":\s").*(")'
            replace: '"value": "10"'

        - name: reset location number in folder
          ansible.builtin.replace:
            path: "{{ item }}"
            after: 'graphTooltip'
            before: 'liveNow'
            regexp: '"id":\s.*,'
            replace: '"id": 0,'
          with_fileglob:
            - ../dashboards/*
            - ../dashboards/Mimir/*
            - ../dashboards/Prometheus/*
            - ../dashboards/Redis/*
            - ../dashboards/GitLab/*

        - name: reset dashboard uid
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '("uid":\s").*(",)'
            replace: '\1\2'
          with_fileglob:
            - ../dashboards/*
            - ../dashboards/Mimir/*
            - ../dashboards/Prometheus/*
            - ../dashboards/Redis/*
            - ../dashboards/GitLab/*

        - name: reset dashboard version
          ansible.builtin.replace:
            path: "{{ item }}"
            regexp: '"version":\s.*,'
            replace: '"version": 0,'
          with_fileglob:
            - ../dashboards/*
            - ../dashboards/Mimir/*
            - ../dashboards/Prometheus/*
            - ../dashboards/Redis/*
            - ../dashboards/GitLab/*
      delegate_to: localhost
      become: false
      when: dashboard_uid.results | community.general.json_query('[*].rc') | reject('match', '0')

    - name: create a directory
      ansible.builtin.file:
        path: /mnt/ssd/monitoring/grafana-dashboards
        state: directory

    - name: create folders
      ansible.builtin.file:
        path: /mnt/ssd/monitoring/grafana-dashboards/{{ item.path }}
        state: directory
        mode: '{{ item.mode }}'
      with_community.general.filetree: ../dashboards/
      when: item.state == 'directory'

    - name: upload grafana dashboards
      ansible.builtin.template:
        src: '{{ item.src }}'
        dest: /mnt/ssd/monitoring/grafana-dashboards/{{ item.path }}
        mode: '{{ item.mode }}'
      with_community.general.filetree: ../dashboards/
      when: item.state == 'file'
