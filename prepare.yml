---
- name: get secrets from 1password and configure in-memory inventory
  hosts: localhost
  become: false
  gather_facts: false
  tasks:
    - name: sign in to a 1password account
      ansible.builtin.shell: |
        echo {{ vault_1password_master_password }} | op account add \
          --address {{ vault_1password_subdomain }}.1password.com \
          --email {{ vault_1password_email_address }} \
          --secret-key {{ vault_1password_secret_key }} \
          --signin --raw
      environment:
        OP_DEVICE: "{{ vault_1password_device_id }}"
      register: op_session_token
      changed_when: false
      no_log: true
      tags: always

    - name: get secrets from 1password | root (1/2)
      ansible.builtin.command: |
        op item get 'Secrets (manually)' \
          --vault 'Local server' \
          --fields label={{ item }} \
          --session {{ op_session_token.stdout }}
      loop:
        - "'Root account'.ip-address"
        - "'Root account'.password"
        - "'Technical account'.username"
      register: secrets
      changed_when: false
      no_log: true
      tags: always

    - name: get secrets from 1password | root (2/2)
      ansible.builtin.set_fact:
        server_ip_address: "{{ secrets.results[0].stdout }}"
        nixos_root_password: "{{ secrets.results[1].stdout }}"
        nixos_technical_account_name: "{{ secrets.results[2].stdout }}"
      tags: always

    - name: check connection to server under root
      ansible.builtin.command: "sshpass -e ssh -o StrictHostKeyChecking=no root@{{ server_ip_address }} 'exit'"
      environment:
        SSHPASS: "{{ nixos_root_password }}"
      register: root_available
      failed_when: false
      changed_when: false
      tags: always

    - name: add a host to the ansible-playbook in-memory inventory | root
      ansible.builtin.add_host:
        name: server
        ansible_host: "{{ server_ip_address }}"
        ansible_user: root
        ansible_password: "{{ nixos_root_password }}"
      changed_when: false
      no_log: true
      when: root_available.rc == 0
      tags: always

    - name: add a host to the ansible-playbook in-memory inventory | technical account
      ansible.builtin.add_host:
        name: server
        ansible_host: "{{ server_ip_address }}"
        ansible_user: "{{ nixos_technical_account_name }}"
        ansible_ssh_private_key_file: id_ed25519
        ansible_python_interpreter: /run/current-system/sw/bin/python
      changed_when: false
      no_log: true
      when: root_available.rc != 0
      tags: always

- name: install requirements for ansible
  hosts: server
  become: true
  gather_facts: false
  tasks:
    - name: install python3
      ansible.builtin.raw: |
        cat > /etc/nixos/python.nix << EOF
        { pkgs, ... }:

        {
          environment.systemPackages = with pkgs; [
            (let
              my-python-packages = python-packages: with python-packages; [
                passlib # for community.general.htpasswd ansible module
              ];
              python-with-my-packages = python3.withPackages my-python-packages;
            in
            python-with-my-packages)
          ];
        }
        EOF

        grep -qxF '      ./python.nix' /etc/nixos/configuration.nix || sed -i '/.\/hardware-configuration.nix/a \      ./python.nix' /etc/nixos/configuration.nix

        nixos-rebuild switch
      changed_when: false
      tags: always

- name: upgrade nixos
  hosts: server
  become: true
  gather_facts: false
  tasks:
    - name: find the current version of nixos
      ansible.builtin.shell: nixos-version | cut -f 1-2 -d "."
      register: nixos_current_version
      changed_when: false
      tags: [ never, upgrade ]

    - name: find the latest version of nixos
      ansible.builtin.shell: git -c 'versionsort.suffix=-' ls-remote --tags --sort='-version:refname' --exit-code https://github.com/NixOS/nixpkgs.git '[0-9][0-9].[0-9][0-9]' | head -n 1 | sed -E 's|.*refs/tags/(.+)|\1|'
      register: nixos_latest_version
      delegate_to: localhost
      changed_when: false
      become: false
      tags: [ never, upgrade ]

    - name: try to upgrade without switching to the latest nixos channel
      ansible.builtin.command: nixos-rebuild -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/refs/tags/{{ nixos_latest_version.stdout }}.tar.gz build
      register: build_result
      when: nixos_current_version.stdout < nixos_latest_version.stdout
      tags: [ never, upgrade ]

    - name: display output if warning occurs
      ansible.builtin.debug:
        msg: "{{ build_result }}"
      when:
        - build_result.changed
        - "'warning' in build_result.stderr"
      tags: [ never, upgrade ]

    - name: switch to the latest stable nixos channel for servers
      ansible.builtin.command: nix-channel --add https://nixos.org/channels/nixos-{{ nixos_latest_version.stdout }}-small nixos
      when:
        - build_result.changed
        - "'warning' not in build_result.stderr"
      tags: [ never, upgrade ]

    - name: upgrade nixos to the latest version
      ansible.builtin.command: nixos-rebuild switch --upgrade
      when:
        - build_result.changed
        - "'warning' not in build_result.stderr"
      tags: [ never, upgrade ]

- name: configure connection parameters
  hosts: server
  become: true
  gather_facts: false
  tasks:
    # https://github.com/ansible/ansible/issues/77217
    #- name: generate an openssh keypair
    #  community.crypto.openssh_keypair:
    #    type: ed25519
    #    path: id_ed25519
    #    comment: "{{ hostvars['localhost']['nixos_technical_account_name'] }}"
    #  delegate_to: localhost
    #  become: false

    - name: generate an openssh keypair
      ansible.builtin.command: ssh-keygen -t ed25519 -f id_ed25519 -C {{ hostvars['localhost']['nixos_technical_account_name'] }} -q -N ""
      args:
        creates: id_ed25519
      delegate_to: localhost
      become: false

    - name: read content of a public key
      ansible.builtin.command: cat id_ed25519.pub
      register: id_ed25519_pub
      delegate_to: localhost
      changed_when: false
      become: false

    - name: create technical account
      ansible.builtin.copy:
        content: |
          { pkgs, ... }:

          {
            users.groups.{{ hostvars['localhost']['nixos_technical_account_name'] }} = {};
            users.users.{{ hostvars['localhost']['nixos_technical_account_name'] }} = {
              isSystemUser = true;
              group = "{{ hostvars['localhost']['nixos_technical_account_name'] }}";
              extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
              openssh.authorizedKeys.keys = [ "{{ id_ed25519_pub.stdout }}" ];
              createHome = true;
              home = "/home/{{ hostvars['localhost']['nixos_technical_account_name'] }}";
              useDefaultShell = true;
              packages = with pkgs; [
                expect  # to generate ca and self-signed certificate
                openssl # to generate ca and self-signed certificate
              ];
            };
          }
        dest: /etc/nixos/technical-account.nix
      notify: apply config

    - name: allow group wheel to run commands without a password
      ansible.builtin.blockinfile:
        path: /etc/nixos/configuration.nix
        insertbefore: "# List packages"
        block: |2
            # Allow people in group wheel to run all commands without a password
            security.sudo.wheelNeedsPassword = false;
        marker: "  # {mark} ANSIBLE MANAGED BLOCK WHEEL"
        backup: true
      notify: apply config

    - name: insert an empty line after the marker line
      ansible.builtin.replace:
        path: /etc/nixos/configuration.nix
        regexp: "(?<=.\n)  # List packages"
        replace: "\n  # List packages"

    - name: import config
      ansible.builtin.lineinfile:
        path: /etc/nixos/configuration.nix
        insertafter: ".\/python.nix"
        line: "      ./technical-account.nix"
        backup: true
      notify: apply config

    - name: forbid root login
      ansible.builtin.replace:
        path: /etc/nixos/configuration.nix
        regexp: '(permitRootLogin = ").*(";)'
        replace: '\1no\2'
        backup: true
      notify: apply config

    - name: install parted for 'configure disks' play (1/3)
      ansible.builtin.replace:
        path: /etc/nixos/configuration.nix
        regexp: '# (environment\.systemPackages \= with pkgs; \[)'
        replace: '\1'
        backup: true
      notify: apply config

    - name: install parted for 'configure disks' play (2/3)
      ansible.builtin.blockinfile:
        path: /etc/nixos/configuration.nix
        insertafter: '#   wget'
        block: |2
              parted  # For community.general.parted ansible module
        marker: "    # {mark} ANSIBLE MANAGED BLOCK PARTED"
        backup: true
      notify: apply config

    - name: install parted for 'configure disks' play (3/3)
      ansible.builtin.replace:
        path: /etc/nixos/configuration.nix
        regexp: '# (];)'
        replace: '\1'
        backup: true
      notify: apply config

  handlers:
    - name: check compilation
      ansible.builtin.command: nixos-rebuild build
      listen: apply config

    - name: rebuild system
      ansible.builtin.command: nixos-rebuild switch
      register: rebuild_output
      listen: apply config

    - name: display rebuild output
      ansible.builtin.debug:
        msg: "{{ rebuild_output.stderr_lines }}"
      listen: apply config

  post_tasks:
    - name: check if item in 1password has been created
      ansible.builtin.command: |
        op item get 'NixOS technical account (generated)' \
          --vault 'Local server' \
          --session {{ hostvars['localhost']['op_session_token']['stdout'] }}
      register: item_created
      delegate_to: localhost
      failed_when: false
      changed_when: false
      become: false
      no_log: true

    - name: create an item in 1password with credentials for technical account
      ansible.builtin.shell: |
        op item template get Server --session {{ hostvars['localhost']['op_session_token']['stdout'] }} | op item create --vault 'Local server' - \
          --title 'NixOS technical account (generated)' \
          command[text]="ssh {{ hostvars['localhost']['nixos_technical_account_name'] }}@{{ hostvars['localhost']['server_ip_address'] }} -i id_ed25519" \
          [file]=id_ed25519 \
          [file]=id_ed25519.pub \
          --session {{ hostvars['localhost']['op_session_token']['stdout'] }}
      delegate_to: localhost
      become: false
      no_log: true
      when: item_created.rc != 0

    - name: create inventory file
      ansible.builtin.copy:
        content: >
          server
          ansible_host={{ hostvars['localhost']['server_ip_address'] }}
          ansible_user={{ hostvars['localhost']['nixos_technical_account_name'] }}
          ansible_ssh_private_key_file=id_ed25519
          ansible_python_interpreter=/run/current-system/sw/bin/python
        dest: hosts
      delegate_to: localhost
      become: false

- name: configure disks
  hosts: server
  become: true
  gather_facts: false
  tasks:
    - name: gathers facts
      ansible.builtin.setup:

    - name: find names of all disks
      ansible.builtin.set_fact:
        disks_names: "{{ ansible_facts.devices | dict2items |
                         rejectattr('key', 'match', '^loop.*') |
                         map(attribute='key') | list }}"

    - name: find ssd root disk
      ansible.builtin.set_fact:
        ssd_root_disk: "{{ ansible_facts.devices | dict2items |
                           selectattr('key', 'match', item) |
                           selectattr('value.size', 'match', '^111.79 GB') |
                           map(attribute='key') | join() }}"
      when: ansible_facts.devices | dict2items |
            selectattr('key', 'match', item) |
            json_query('[*].value.partitions.*.links[].labels[]') | select('match', 'nixos|swap|boot')
      loop: "{{ disks_names }}"

    - name: find ssd data disk
      ansible.builtin.set_fact:
        ssd_data_disk: "{{ ansible_facts.devices | dict2items |
                           rejectattr('key', 'match', '^loop.*') |
                           rejectattr('key', 'match', ssd_root_disk) |
                           selectattr('value.size', 'match', '^111.79 GB') |
                           map(attribute='key') | join() }}"

    - name: find hdd data disk
      ansible.builtin.set_fact:
        hdd_data_disk: "{{ ansible_facts.devices | dict2items |
                           rejectattr('key', 'match', '^loop.*') |
                           selectattr('key', 'match', '^sd.*') |
                           selectattr('value.size', 'match', '^3.64 TB') |
                           map(attribute='key') | join() }}"

    - name: create gpt partition table
      community.general.parted:
        device: "/dev/{{ item }}"
        label: gpt
        number: 1
        state: present
      loop:
        - "{{ ssd_data_disk }}"
        - "{{ hdd_data_disk }}"

    - name: create a ext4 filesystem and add label
      community.general.filesystem:
        fstype: ext4
        dev: "/dev/{{ item.dev }}1"
        opts: "-L {{ item.label }}"
      loop:
        - { dev: "{{ ssd_data_disk }}", label: ssd }
        - { dev: "{{ hdd_data_disk }}", label: hdd }

    - name: create mount point
      ansible.builtin.copy:
        content: |
          {
          {%- for i in labels +%}
            fileSystems."/mnt/{{ i }}" = {
              device = "/dev/disk/by-label/{{ i }}";
              fsType = "ext4";
              options = [ "nofail" ];
            };
          {% endfor %}
          }
        dest: /etc/nixos/disks.nix
      vars:
        labels:
          - ssd
          - hdd
      notify: apply config

    - name: import config
      ansible.builtin.lineinfile:
        path: /etc/nixos/configuration.nix
        insertafter: ".\/technical-account.nix"
        line: "      ./disks.nix"
        backup: true
      notify: apply config

  handlers:
    - name: check compilation
      ansible.builtin.command: nixos-rebuild build
      listen: apply config

    - name: rebuild system
      ansible.builtin.command: nixos-rebuild switch
      register: rebuild_output
      listen: apply config

    - name: display rebuild output
      ansible.builtin.debug:
        msg: "{{ rebuild_output.stderr_lines }}"
      listen: apply config

- name: download config
  hosts: server
  become: false
  gather_facts: false
  tasks:
    - name: create a directory
      ansible.builtin.file:
        path: configs
        state: directory
      delegate_to: localhost
      become: false

    - name: copy config from server to local machine
      ansible.posix.synchronize:
        mode: pull
        src: /etc/nixos/configuration.nix
        dest: configs
        rsync_opts: "--ignore-existing"
